//原理：时最简单最快的方法，只是比较正整数，0--9十个桶，每个桶可采用桶排序（从个位到高位）或者计数排序
 //参考原文：https://cuijiahua.com/blog/2018/01/algorithm_8.html
//在此对原作者表示谢意，敬礼
#include <iostream>
#include <vector>

using namespace std;

int MaxBit(vector<int> input)
{
    int max_data = input[0];
    for (int i = 1;i < input.size();i++)
    {
        if (input[i] > max_data)
        {
            max_data = input[i];
        }
    }

    int bit_num = 0;
    while(max_data)
    {
        bit_num++;
        max_data /= 10;
    }

    return bit_num;
}
// 取数xxx上的第d位数字     453 1   453/1 = 45%10
int digit(int num, int d) {
    int pow = 1;
    while (--d > 0) {
        pow *= 10;
    }
    return num / pow % 10;
}
//下面也是可以的
int get_digit(int data, int bit)
{
    //123
    //获取某一位的值
    int pow = 1;
    while (--bit > 0)
    {
        data = data / 10;
    }

    //123/100
    int result = 0;
    result = data / pow % 10;    //直接取余数

    return result;

}


//基数排序
vector<int> RadixSort(vector<int> input, int n)
{
    //临时数组用来存放排序过程中得数据
    vector<int> bucket(n);
    //位计数器 每个小标代表当前数值，存放得值代表下标出现得次数
    vector<int> count(10);

    //从低位到高位循环
    for (int d = 1;d <= MaxBit(input);d++)
    {
        //计数器清零
        for (int i = 0;i < 10;i++)
        {
            count[i] = 0;
        }

        //统计各个桶中的个数
        //本次循环先统计个位数
        for (int i = 0;i < n;i++)
        {
            count[digit(input[i], d)]++;
        }

        /*
       * 比如某次经过上面统计后结果为：[0, 2, 3, 3, 0, 0, 0, 0, 0, 0]则经过下面计算后 结果为： [0, 2,
       * 5, 8, 8, 8, 8, 8, 8, 8]但实质上只有如下[0, 2, 5, 8, 0, 0, 0, 0, 0, 0]中
       * 非零数才用到，因为其他位不存在，它们分别表示如下：2表示比较位为1的元素可以存放在索引为1、0的
       * 位置，5表示比较位为2的元素可以存放在4、3、2三个(5-2=3)位置，8表示比较位为3的元素可以存放在
       * 7、6、5三个(8-5=3)位置
       */

        for (int i = 1;i < 10;i++)
        {
            //这样做是为了留下多余的位置给某个计数器存多个值的多个缓冲区 
            //0，2，3，3，0，0，0，0，0，0
            //0，2，5，8，8，8，8，8，8，8
            //转换成易于理解的下标（count[k] - 1;count[k]--）
            //1，1，2，2，2，4，4，4 ，

            count[i] += count[i - 1];    //此时count[i]就是需要存放到哪个位置
        }

        /*
       * 注，这里只能从数组后往前循环，因为排序时还需保持以前的已排序好的顺序，不应该打
       * 乱原来已排好的序，如果从前往后处理，则会把原来在前面会摆到后面去，因为在处理某个
       * 元素的位置时，位记数器是从大到到小（count[digit(arr[i], d)]--）的方式来处
       * 理的，即先存放索引大的元素，再存放索引小的元素，所以需从最后一个元素开始处理。
       * 如有这样的一个序列[212,213,312]，如果按照从第一个元素开始循环的话，经过第一轮
       * 后（个位）排序后，得到这样一个序列[312,212,213]，第一次好像没什么问题，但问题会
       * 从第二轮开始出现，第二轮排序后，会得到[213,212,312]，这样个位为3的元素本应该
       * 放在最后，但经过第二轮后却排在了前面了，所以出现了问题
       */

        for (int i = n - 1;i >= 0;i--)
        {
            int k = digit(input[i], d);     //k是当前数字（倒着取：100）的第d位值，count[k] - 1是
            bucket[count[k] - 1] = input[i];   //bucket存放的是什么：当前数值，存放到临时数组的下标：count[k]-1位置
            count[k]--;

        }

        // 临时数组复制到 input 中
        for (int i = 0; i < n; i++) 
        {
            input[i] = bucket[i];
        }
    }

    return input;
}

int main_radix_sort()
{
    
    printf("dig:%d\n", digit(453, 1));
    printf("dig2:%d\n", digit(453, 2));
    printf("dig3:%d\n", digit(453, 3));

    //模拟一下
    //0    1    2    3    4   5   6   7   8   9
    //50   11   2    123              187      49
    //30             543
    //0
    //100
 //count:4  1   1     2   0   0   0    1   0    1
 //累加  4  5    6     8   8   8   8    9   9   10       //这样子就确定了下标位置
    int arr[] = { 50, 123, 543, 187, 49, 30, 0, 2, 11, 100 };
    vector<int> test(arr, arr + sizeof(arr) / sizeof(arr[0]));
    cout << "排序前:";
    for (int i = 0; i < test.size(); i++) {
        cout << test[i] << " ";
    }
    cout << endl;

    vector<int> result = test;
    result = RadixSort(result, result.size());
    cout << "排序后:";
    for (int i = 0; i < result.size(); i++) {
        cout << result[i] << " ";
    }
    cout << endl;
    system("pause");
    return 0;
}
